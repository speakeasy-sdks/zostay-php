<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace zostay\Speakeasy_API;

/**
 * SpeakeasyAPI - Speakeasy API: The Speakeasy API allows teams to manage common operations with their APIs
 * 
 * https://docs.speakeasyapi.dev - The Speakeasy Platform Documentation
 * 
 * @package zostay\Speakeasy_API
 * @access public
 * @see https://docs.speakeasyapi.dev
 */
class SpeakeasyAPI
{
	public const SERVER_PROD = 'prod';
	
	public const SERVERS = [
		SpeakeasyAPI::SERVER_PROD => 'https://api.prod.speakeasyapi.dev',
	];
  	
    /**
     * REST APIs for managing ApiEndpoint entities
     * 
     * @var ApiEndpoints $$apiEndpoints
     */
	public ApiEndpoints $apiEndpoints;
	
    /**
     * REST APIs for managing Api entities
     * 
     * @var Apis $$apis
     */
	public Apis $apis;
	
    /**
     * REST APIs for managing embeds
     * 
     * @var Embeds $$embeds
     */
	public Embeds $embeds;
	
    /**
     * REST APIs for managing Version Metadata entities
     * 
     * @var Metadata $$metadata
     */
	public Metadata $metadata;
	
    /**
     * REST APIs for managing and running plugins
     * 
     * @var Plugins $$plugins
     */
	public Plugins $plugins;
	
    /**
     * REST APIs for retrieving request information
     * 
     * @var Requests $$requests
     */
	public Requests $requests;
	
    /**
     * REST APIs for managing Schema entities
     * 
     * @var Schemas $$schemas
     */
	public Schemas $schemas;
		
	private SDKConfiguration $sdkConfiguration;

	/**
	 * Returns a new instance of the SDK builder used to configure and create the SDK instance.
	 * 
	 * @return SpeakeasyAPIBuilder
	 */
	public static function builder(): SpeakeasyAPIBuilder
	{
		return new SpeakeasyAPIBuilder();
	}

	/**
	 * @param SDKConfiguration $sdkConfiguration
	 */
	public function __construct(SDKConfiguration $sdkConfiguration)
	{
		$this->sdkConfiguration = $sdkConfiguration;
		
		$this->apiEndpoints = new ApiEndpoints($this->sdkConfiguration);
		
		$this->apis = new Apis($this->sdkConfiguration);
		
		$this->embeds = new Embeds($this->sdkConfiguration);
		
		$this->metadata = new Metadata($this->sdkConfiguration);
		
		$this->plugins = new Plugins($this->sdkConfiguration);
		
		$this->requests = new Requests($this->sdkConfiguration);
		
		$this->schemas = new Schemas($this->sdkConfiguration);
	}
	
    /**
     * Validate the current api key.
     * 
     * @return \zostay\Speakeasy_API\Models\Operations\ValidateApiKeyResponse
     */
	public function validateApiKey(
    ): \zostay\Speakeasy_API\Models\Operations\ValidateApiKeyResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/auth/validate');
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion);
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \zostay\Speakeasy_API\Models\Operations\ValidateApiKeyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'zostay\Speakeasy_API\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
}