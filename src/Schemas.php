<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace zostay\Speakeasy_API;

class Schemas 
{

	private SDKConfiguration $sdkConfiguration;

	/**
	 * @param SDKConfiguration $sdkConfig
	 */
	public function __construct(SDKConfiguration $sdkConfig)
	{
		$this->sdkConfiguration = $sdkConfig;
	}
	
    /**
     * Delete a particular schema revision for an Api.
     * 
     * @param \zostay\Speakeasy_API\Models\Operations\DeleteSchemaRequest $request
     * @return \zostay\Speakeasy_API\Models\Operations\DeleteSchemaResponse
     */
	public function deleteSchema(
        \zostay\Speakeasy_API\Models\Operations\DeleteSchemaRequest $request,
    ): \zostay\Speakeasy_API\Models\Operations\DeleteSchemaResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/apis/{apiID}/version/{versionID}/schema/{revisionID}', \zostay\Speakeasy_API\Models\Operations\DeleteSchemaRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \zostay\Speakeasy_API\Models\Operations\DeleteSchemaResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'zostay\Speakeasy_API\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Download the latest schema for a particular apiID.
     * 
     * @param \zostay\Speakeasy_API\Models\Operations\DownloadSchemaRequest $request
     * @return \zostay\Speakeasy_API\Models\Operations\DownloadSchemaResponse
     */
	public function downloadSchema(
        \zostay\Speakeasy_API\Models\Operations\DownloadSchemaRequest $request,
    ): \zostay\Speakeasy_API\Models\Operations\DownloadSchemaResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/apis/{apiID}/version/{versionID}/schema/download', \zostay\Speakeasy_API\Models\Operations\DownloadSchemaRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json;q=1, application/json;q=0.7, application/x-yaml;q=0';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \zostay\Speakeasy_API\Models\Operations\DownloadSchemaResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->schema = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'application/x-yaml')) {
                $response->schema = $httpResponse->getBody()->getContents();
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'zostay\Speakeasy_API\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Download a particular schema revision for an Api.
     * 
     * @param \zostay\Speakeasy_API\Models\Operations\DownloadSchemaRevisionRequest $request
     * @return \zostay\Speakeasy_API\Models\Operations\DownloadSchemaRevisionResponse
     */
	public function downloadSchemaRevision(
        \zostay\Speakeasy_API\Models\Operations\DownloadSchemaRevisionRequest $request,
    ): \zostay\Speakeasy_API\Models\Operations\DownloadSchemaRevisionResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/apis/{apiID}/version/{versionID}/schema/{revisionID}/download', \zostay\Speakeasy_API\Models\Operations\DownloadSchemaRevisionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json;q=1, application/json;q=0.7, application/x-yaml;q=0';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \zostay\Speakeasy_API\Models\Operations\DownloadSchemaRevisionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->schema = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'application/x-yaml')) {
                $response->schema = $httpResponse->getBody()->getContents();
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'zostay\Speakeasy_API\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get information about the latest schema.
     * 
     * Returns information about the last uploaded schema for a particular API version. 
     * This won't include the schema itself, that can be retrieved via the downloadSchema operation.
     * 
     * @param \zostay\Speakeasy_API\Models\Operations\GetSchemaRequest $request
     * @return \zostay\Speakeasy_API\Models\Operations\GetSchemaResponse
     */
	public function getSchema(
        \zostay\Speakeasy_API\Models\Operations\GetSchemaRequest $request,
    ): \zostay\Speakeasy_API\Models\Operations\GetSchemaResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/apis/{apiID}/version/{versionID}/schema', \zostay\Speakeasy_API\Models\Operations\GetSchemaRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json;q=1, application/json;q=0';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \zostay\Speakeasy_API\Models\Operations\GetSchemaResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->schema = $serializer->deserialize((string)$httpResponse->getBody(), 'zostay\Speakeasy_API\Models\Shared\Schema', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'zostay\Speakeasy_API\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a diff of two schema revisions for an Api.
     * 
     * @param \zostay\Speakeasy_API\Models\Operations\GetSchemaDiffRequest $request
     * @return \zostay\Speakeasy_API\Models\Operations\GetSchemaDiffResponse
     */
	public function getSchemaDiff(
        \zostay\Speakeasy_API\Models\Operations\GetSchemaDiffRequest $request,
    ): \zostay\Speakeasy_API\Models\Operations\GetSchemaDiffResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/apis/{apiID}/version/{versionID}/schema/{baseRevisionID}/diff/{targetRevisionID}', \zostay\Speakeasy_API\Models\Operations\GetSchemaDiffRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json;q=1, application/json;q=0';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \zostay\Speakeasy_API\Models\Operations\GetSchemaDiffResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->schemaDiff = $serializer->deserialize((string)$httpResponse->getBody(), 'zostay\Speakeasy_API\Models\Shared\SchemaDiff', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'zostay\Speakeasy_API\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get information about a particular schema revision for an Api.
     * 
     * Returns information about the last uploaded schema for a particular schema revision. 
     * This won't include the schema itself, that can be retrieved via the downloadSchema operation.
     * 
     * @param \zostay\Speakeasy_API\Models\Operations\GetSchemaRevisionRequest $request
     * @return \zostay\Speakeasy_API\Models\Operations\GetSchemaRevisionResponse
     */
	public function getSchemaRevision(
        \zostay\Speakeasy_API\Models\Operations\GetSchemaRevisionRequest $request,
    ): \zostay\Speakeasy_API\Models\Operations\GetSchemaRevisionResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/apis/{apiID}/version/{versionID}/schema/{revisionID}', \zostay\Speakeasy_API\Models\Operations\GetSchemaRevisionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json;q=1, application/json;q=0';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \zostay\Speakeasy_API\Models\Operations\GetSchemaRevisionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->schema = $serializer->deserialize((string)$httpResponse->getBody(), 'zostay\Speakeasy_API\Models\Shared\Schema', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'zostay\Speakeasy_API\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get information about all schemas associated with a particular apiID.
     * 
     * Returns information the schemas associated with a particular apiID. 
     * This won't include the schemas themselves, they can be retrieved via the downloadSchema operation.
     * 
     * @param \zostay\Speakeasy_API\Models\Operations\GetSchemasRequest $request
     * @return \zostay\Speakeasy_API\Models\Operations\GetSchemasResponse
     */
	public function getSchemas(
        \zostay\Speakeasy_API\Models\Operations\GetSchemasRequest $request,
    ): \zostay\Speakeasy_API\Models\Operations\GetSchemasResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/apis/{apiID}/version/{versionID}/schemas', \zostay\Speakeasy_API\Models\Operations\GetSchemasRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json;q=1, application/json;q=0';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \zostay\Speakeasy_API\Models\Operations\GetSchemasResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->schemata = $serializer->deserialize((string)$httpResponse->getBody(), 'array<zostay\Speakeasy_API\Models\Shared\Schema>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'zostay\Speakeasy_API\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Register a schema.
     * 
     * Allows uploading a schema for a particular API version.
     * This will be used to populate ApiEndpoints and used as a base for any schema generation if present.
     * 
     * @param \zostay\Speakeasy_API\Models\Operations\RegisterSchemaRequest $request
     * @return \zostay\Speakeasy_API\Models\Operations\RegisterSchemaResponse
     */
	public function registerSchema(
        \zostay\Speakeasy_API\Models\Operations\RegisterSchemaRequest $request,
    ): \zostay\Speakeasy_API\Models\Operations\RegisterSchemaResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/apis/{apiID}/version/{versionID}/schema', \zostay\Speakeasy_API\Models\Operations\RegisterSchemaRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "multipart");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \zostay\Speakeasy_API\Models\Operations\RegisterSchemaResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'zostay\Speakeasy_API\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
}